import{_ as s,c as a,o as l,a as n}from"./app.ed024433.js";const h=JSON.parse('{"title":"Webpack","description":"","frontmatter":{},"headers":[{"level":2,"title":"Loader和Plugin的区别","slug":"loader和plugin的区别","link":"#loader和plugin的区别","children":[]},{"level":2,"title":"Webpack构建流程","slug":"webpack构建流程","link":"#webpack构建流程","children":[]},{"level":2,"title":"常见的Loader有哪些？","slug":"常见的loader有哪些","link":"#常见的loader有哪些","children":[]},{"level":2,"title":"常见的Plugin有哪些？","slug":"常见的plugin有哪些","link":"#常见的plugin有哪些","children":[]},{"level":2,"title":"自定义Loader","slug":"自定义loader","link":"#自定义loader","children":[]},{"level":2,"title":"自定义Plugin","slug":"自定义plugin","link":"#自定义plugin","children":[]},{"level":2,"title":"source-map","slug":"source-map","link":"#source-map","children":[]},{"level":2,"title":"文件指纹","slug":"文件指纹","link":"#文件指纹","children":[]},{"level":2,"title":"Tree Shaking","slug":"tree-shaking","link":"#tree-shaking","children":[]}],"relativePath":"guide/Webpack.md","lastUpdated":1673594167000}'),e={name:"guide/Webpack.md"},o=n(`<h1 id="webpack" tabindex="-1">Webpack <a class="header-anchor" href="#webpack" aria-hidden="true">#</a></h1><h2 id="loader和plugin的区别" tabindex="-1">Loader和Plugin的区别 <a class="header-anchor" href="#loader和plugin的区别" aria-hidden="true">#</a></h2><ul><li><code>Loader</code>本质是一个函数，在函数中对接收到的内容进行转换，然后返回转换后的结果。因为<code>Webpack</code>只认识<code>JavaScript</code>，所以<code>Loader</code>就相当于一个翻译官，对其他类型的资源进行转译处理工作</li><li><code>Plugin</code>就是插件，它可以扩展<code>webpack</code>的功能。在<code>Webpack</code>运行的生命周期会广播出许多事件，那么<code>Plugin</code>就可以监听这些事件，然后在合适的时机通过<code>Webpack</code>提供的<code>API</code>改变输出结果</li></ul><h2 id="webpack构建流程" tabindex="-1">Webpack构建流程 <a class="header-anchor" href="#webpack构建流程" aria-hidden="true">#</a></h2><ul><li>初始化：启动构建，读取并且合并配置参数，然后加载 <code>Plugin</code>，实例化 <code>Compiler</code></li><li>编译：从 <code>Entry </code>入口开始，针对每个<code>Module </code>串行调用对应的 <code>Loader </code>去翻译文件的内容，再找到该 <code>Module </code>依赖的 <code>Module</code>，递归地进行编译处理</li><li>输出：将编译后的 <code>Module </code>组合成 <code>Chunk</code>，将 <code>Chunk </code>转换成文件，输出到文件系统中</li></ul><h2 id="常见的loader有哪些" tabindex="-1">常见的Loader有哪些？ <a class="header-anchor" href="#常见的loader有哪些" aria-hidden="true">#</a></h2><ul><li>babel-loader：把ES6转换成ES5</li><li>css-loader：加载CSS</li><li>style-loader：将CSS代码注入到JS中，通过DOM操作区加载CSS</li><li>sass-loader：将SCSS/SASS代码转换成CSS</li><li>less-loader：将less代码转换成CSS</li><li>url-loader：是用来处理图片、文件等模块信息，而图片会转换成base64编码格式</li><li>eslint-loader：用于检查JS代码</li><li>vue-loader：用于加载vue组件</li></ul><h2 id="常见的plugin有哪些" tabindex="-1">常见的Plugin有哪些？ <a class="header-anchor" href="#常见的plugin有哪些" aria-hidden="true">#</a></h2><ul><li>html-webpack-plugin：简化HTML文件创建</li><li>webpack-bundle-analyzer：可视化Webpack的输出</li><li>clean-webpack-plugin：可以用于构建前清理dist文件夹</li><li>ignore-plugin：忽略部分文件</li></ul><h2 id="自定义loader" tabindex="-1">自定义Loader <a class="header-anchor" href="#自定义loader" aria-hidden="true">#</a></h2><p>编写<code>Loader</code>一般要遵循单一原则，每个<code>Loader</code>只做一种转义工作。每个<code>Loader</code>函数可以拿到源文件内容<code>source</code>，其中<code>this.query</code>能拿到<code>webpack.config.js</code>中的<code>options</code>，我们可以调用<code>this.callback()</code>方法返回处理结果，如果是想要异步操作就可以用<code>this.async()</code></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// webpack.config.js module 代码片段</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">test</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">js</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">use</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                loader</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">replaceLoader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                options</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                    name</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">jack</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">        ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 自定义 loader 代码片段</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">source</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// 获取options</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">options</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">query</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//调用this.async()这个API，来给异步代码使用</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">callback</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">async</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">monday</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">callback</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5000</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="自定义plugin" tabindex="-1">自定义Plugin <a class="header-anchor" href="#自定义plugin" aria-hidden="true">#</a></h2><p>对于自定义<code>Plugin</code>，主要的关键就是监听<code>Webpack</code>编译阶段中的事件，然后在这些生命周期钩子函数中去做需要去做的事情，在自己写的<code>Plugin</code>中的<code>apply</code>方法能接收到<code>compiler</code>实例，其中有<code>tap</code>和<code>call</code>，可以简单理解为<code>监听</code>和<code>触发</code></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">compiler</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hooks</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">钩子函数</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">tap</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// 监听</span></span>
<span class="line"><span style="color:#A6ACCD;">compiler</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hooks</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">钩子函数</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">//触发</span></span>
<span class="line"></span></code></pre></div><h2 id="source-map" tabindex="-1">source-map <a class="header-anchor" href="#source-map" aria-hidden="true">#</a></h2><ul><li><code>source-map</code>是从<code>已转换的代码</code>映射到<code>原始的源文件</code>，如果浏览器支持的话，调试的时候能自动地将错误映射到源文件</li><li>代码中引入 <code>//# sourceMappingURL=xxx.js.map</code>启用</li><li><code>js</code>和<code>css</code>都可以有</li></ul><h2 id="文件指纹" tabindex="-1">文件指纹 <a class="header-anchor" href="#文件指纹" aria-hidden="true">#</a></h2><ul><li>Hash：和整个项目的构建相关，只要项目文件有修改，整个项目构建的<code>Hash </code>值就会更改，这一点其实不是很好，因为一旦一个文件发生了变化，所有的文件名字都会发生变化，起不到缓存的效果</li><li>chunkHash：和<code>webpack</code>构建相应的<code>chunk</code>有关，不同的<code>entry</code>会生成不同的<code>chunkHash</code>值</li><li>ContentHash：根据文件内容来定义<code>Hash</code>，文件内容不变，则<code>contentHash </code>不变</li></ul><h2 id="tree-shaking" tabindex="-1">Tree Shaking <a class="header-anchor" href="#tree-shaking" aria-hidden="true">#</a></h2><blockquote><p><strong>Tree Shaking 只支持 ES Module的引入方式，不支持 Common JS 的引入方式</strong></p></blockquote><h4 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-hidden="true">#</a></h4><p>用于移除<code>js</code>中的未引用代码，比如引用了其他模块的代码，但是没有使用，<code>Tree Shaking</code>可以将它移除掉。</p><h4 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-hidden="true">#</a></h4><p><code>usedExports</code> 用于在<code>Webpack </code>编译过程中启动标记功能，它会将每个模块中没有被使用过的导出内容标记为 <code>unused</code>，当生成产物时，被标记的变量对应的导出语句会被删除</p><h4 id="如何使用" tabindex="-1">如何使用 <a class="header-anchor" href="#如何使用" aria-hidden="true">#</a></h4><ul><li><p>生产环境：默认使用<code>Tree shaking</code></p></li><li><p>开发环境：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">development</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 重要</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">optimization</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">usedExports</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div></li></ul>`,27),p=[o];function c(r,t,i,d,F,y){return l(),a("div",null,p)}const u=s(e,[["render",c]]);export{h as __pageData,u as default};
