import{_ as e,c as d,o,a as c}from"./app.790ffd25.js";const p=JSON.parse('{"title":"web安全","description":"","frontmatter":{},"headers":[{"level":2,"title":"XSS","slug":"xss","link":"#xss","children":[{"level":3,"title":"反射型XSS","slug":"反射型xss","link":"#反射型xss","children":[]},{"level":3,"title":"存储型XSS","slug":"存储型xss","link":"#存储型xss","children":[]},{"level":3,"title":"DOM型XSS","slug":"dom型xss","link":"#dom型xss","children":[]},{"level":3,"title":"防御","slug":"防御","link":"#防御","children":[]}]},{"level":2,"title":"CSRF","slug":"csrf","link":"#csrf","children":[{"level":3,"title":"原理","slug":"原理","link":"#原理","children":[]},{"level":3,"title":"例子","slug":"例子","link":"#例子","children":[]},{"level":3,"title":"防御","slug":"防御-1","link":"#防御-1","children":[]}]}],"relativePath":"guide/web安全.md","lastUpdated":1673594167000}'),i={name:"guide/web安全.md"},a=c('<h1 id="web安全" tabindex="-1">web安全 <a class="header-anchor" href="#web安全" aria-hidden="true">#</a></h1><h2 id="xss" tabindex="-1">XSS <a class="header-anchor" href="#xss" aria-hidden="true">#</a></h2><h3 id="反射型xss" tabindex="-1">反射型XSS <a class="header-anchor" href="#反射型xss" aria-hidden="true">#</a></h3><p>反射型攻击一般是攻击方通过特定的手法，诱使用户去访问一个包含恶意代码的<code>URL</code>，然后进入网站执行恶意代码，反射型攻击可以窃取客户端的<code>cookie</code>或者钓鱼欺骗</p><h3 id="存储型xss" tabindex="-1">存储型XSS <a class="header-anchor" href="#存储型xss" aria-hidden="true">#</a></h3><p>攻击者事先会将恶意脚本上传或者存储到服务器中，只要受害者浏览包含有这个恶意脚本都会被受到攻击，这种攻击是非常可怕的，可能会大量窃取<code>cookie</code>，这类的攻击一般出现在评论、留言、直播弹幕等地方</p><h3 id="dom型xss" tabindex="-1">DOM型XSS <a class="header-anchor" href="#dom型xss" aria-hidden="true">#</a></h3><p><code>DOM</code>型攻击可以直接通过<code>HTTP</code>劫持，修改对应的<code>HTML</code>文件来实现恶意代码的注入</p><h3 id="防御" tabindex="-1">防御 <a class="header-anchor" href="#防御" aria-hidden="true">#</a></h3><ul><li>将提交的包含有<code>JS</code>敏感字符进行转义，严格控制输入的字符串</li><li>对于不受信任的输入，都应该限定一个合理的长度</li><li>纯前端渲染，明确<code>innerText</code>、<code>setAttribute</code>、<code>style</code>，将代码与数据分隔开</li><li>不要一些不可信的数据传递到这些<code>API</code>，如 <code>eval()</code>、<code>onclick</code>、<code>onerror</code>、<code>onload</code>等</li><li>将<code>cookie</code>设置为<code>http-only</code>，<code>js</code>脚本将无法读取到<code>cookie</code>信息</li><li>严格的<code>CSP</code>，禁止加载外域代码、外域提交、内联脚本执行等较为严格的方式</li></ul><h2 id="csrf" tabindex="-1">CSRF <a class="header-anchor" href="#csrf" aria-hidden="true">#</a></h2><h3 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-hidden="true">#</a></h3><p><code>CSRF</code>是跨站请求伪造的缩写，是一种劫持受信任的用户向服务器发送非预期的请求的攻击方式。通常情况下，<code>CSRF </code>攻击是攻击者借助受害者的<code>Cookie </code>骗取服务器的信任来达到在非授权的情况下执行权限保护之下的操作，比如发表评论、转账、支付等一系列操作。跟跨网站脚本<code>XSS</code>相比，<code>XSS</code>利用的是用户对指定网站的信任，<code>CSRF</code>利用的是网站对用户浏览器的信任</p><h3 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-hidden="true">#</a></h3><ul><li>小明登录了网站<code>A</code>，并且保留了<code>Cookie</code></li><li>这个时候小明打开了带有攻击性代码的网站<code>B</code>，这个网站<code>B</code>会向网站<code>A</code>发送请求</li><li>网站<code>A</code>接收到请求后，对请求进行验证，并确认是受害者小明的凭证，误以为是受害者小明自己发送的请求</li><li>随后网站<code>A</code>响应了这个危险的请求，至此<code>CSRF</code>攻击完成</li></ul><h3 id="防御-1" tabindex="-1">防御 <a class="header-anchor" href="#防御-1" aria-hidden="true">#</a></h3><h4 id="同源检测" tabindex="-1">同源检测 <a class="header-anchor" href="#同源检测" aria-hidden="true">#</a></h4><p>使用同源策略进行限制来源网站，这样就可以知道是否是从本站发出的</p><h5 id="验证origin字段" tabindex="-1">验证Origin字段 <a class="header-anchor" href="#验证origin字段" aria-hidden="true">#</a></h5><p>如果<code>Origin </code>存在，那么直接使用<code>Origin </code>中的字段确认来源域名就可以</p><h5 id="验证referer字段" tabindex="-1">验证Referer字段 <a class="header-anchor" href="#验证referer字段" aria-hidden="true">#</a></h5><p>如果<code>Referer </code>存在，也可以用来确认<code>HTTP </code>请求的来源地址</p><h4 id="验证码" tabindex="-1">验证码 <a class="header-anchor" href="#验证码" aria-hidden="true">#</a></h4><p>在一些敏感操作的地方可以添加验证码，验证码会强制用户必须与应用进行交互，才能完成最终请求，并且<code>CSRF</code>攻击是无法获取到验证码的</p><h4 id="token验证" tabindex="-1">Token验证 <a class="header-anchor" href="#token验证" aria-hidden="true">#</a></h4><p>在请求头中增加一个<code>Token</code>字段，首先浏览器是不会自动携带<code>Token</code>去请求的，并且<code>Token</code>会携带一段加密的<code>jwt</code>用作身份认证，那么这样进行<code>CSRF</code>攻击的时候就仅传递了<code>cookie</code>，并不能表明用户身份，网站即拒绝攻击请求</p><h4 id="cookie-samesite" tabindex="-1">Cookie.SameSite <a class="header-anchor" href="#cookie-samesite" aria-hidden="true">#</a></h4><p><code>Cookie </code>的<code>SameSite </code>属性用来限制第三方<code>Cookie</code>，从而减少安全风险，可以用来防止<code>CSRF </code>攻击和用户追踪</p><ul><li>Strict：最严格，跨站点时，任何情况下都不会发送<code>Cookie</code></li><li>Lax：规则稍微放宽一些</li><li>None</li></ul>',29),r=[a];function l(h,s,n,t,S,u){return o(),d("div",null,r)}const f=e(i,[["render",l]]);export{p as __pageData,f as default};
