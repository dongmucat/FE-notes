import{_ as e,c as a,o as d,a as i}from"./app.756a2891.js";const b=JSON.parse('{"title":"前端工程化","description":"","frontmatter":{},"headers":[{"level":2,"title":"模块化","slug":"模块化","link":"#模块化","children":[{"level":3,"title":"CJS","slug":"cjs","link":"#cjs","children":[]},{"level":3,"title":"AMD","slug":"amd","link":"#amd","children":[]},{"level":3,"title":"CMD","slug":"cmd","link":"#cmd","children":[]},{"level":3,"title":"UMD","slug":"umd","link":"#umd","children":[]},{"level":3,"title":"ESM","slug":"esm","link":"#esm","children":[]}]},{"level":2,"title":"包管理器","slug":"包管理器","link":"#包管理器","children":[{"level":3,"title":"npm","slug":"npm","link":"#npm","children":[]},{"level":3,"title":"yarn","slug":"yarn","link":"#yarn","children":[]},{"level":3,"title":"pnpm","slug":"pnpm","link":"#pnpm","children":[]}]},{"level":2,"title":"前端优化","slug":"前端优化","link":"#前端优化","children":[{"level":3,"title":"性能指标","slug":"性能指标","link":"#性能指标","children":[]},{"level":3,"title":"性能优化","slug":"性能优化","link":"#性能优化","children":[]},{"level":3,"title":"感知优化","slug":"感知优化","link":"#感知优化","children":[]}]}],"relativePath":"guide/前端工程化.md","lastUpdated":1700443665000}'),r={name:"guide/前端工程化.md"},c=i('<h1 id="前端工程化" tabindex="-1">前端工程化 <a class="header-anchor" href="#前端工程化" aria-hidden="true">#</a></h1><h2 id="模块化" tabindex="-1">模块化 <a class="header-anchor" href="#模块化" aria-hidden="true">#</a></h2><h3 id="cjs" tabindex="-1">CJS <a class="header-anchor" href="#cjs" aria-hidden="true">#</a></h3><p><code>CJS</code> 是 <code>CommonJS</code> 的缩写，我们经常在<code>Node</code>中见到它</p><h4 id="关键词" tabindex="-1">关键词 <a class="header-anchor" href="#关键词" aria-hidden="true">#</a></h4><ul><li>require：用于模块引入，是一个函数，所以是运行时加载，它可以接收一个<code>js</code>表达式，</li><li>module：每一个模块都有，主要用于记录当前模块信息</li><li>module.exports：用于模块导出，最终导出的结果，还是以<code>module.exports</code>指向的对象为准</li></ul><h4 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-hidden="true">#</a></h4><ul><li>CommonJS模块是运行时加载，而且是同步加载，一般用在服务端，因为服务端读取的是本地资源，速度很快</li><li>模块可以多次加载，但是实际上只在第一次加载运行，后面都是使用缓存</li><li>模块输出是值的一个浅拷贝</li></ul><h4 id="其它" tabindex="-1">其它 <a class="header-anchor" href="#其它" aria-hidden="true">#</a></h4><ul><li>默认情况下<code>exports</code>和<code>module.exports</code>指向是一样的，但是如果使用<code>module.exports = {}</code>的时候会重新创建一个新对象，这个时候两者的指向就不一样了，但是<code>CJS</code>总是以<code>module.exports</code>指向的对象为准，所以建议不要两者混用</li><li>在浏览器中不能运行，需要其他打包工具打包，在<code>package.json</code>中会以<code>main</code>字段为目标文件路径</li></ul><h3 id="amd" tabindex="-1">AMD <a class="header-anchor" href="#amd" aria-hidden="true">#</a></h3><p><code>AMD</code>的是<code>Asynchronous Module Definition</code>(异步模块定义)，<code>AMD</code>可以理解是<code>CJS</code>在浏览器端的解决方案，因为如果在浏览器总是同步加载的话可能会出现网络加载资源假死的情况，所以在浏览器是采用了异步加载的方案，因此<code>AMD</code>就是异步加载的</p><h4 id="关键词-1" tabindex="-1">关键词 <a class="header-anchor" href="#关键词-1" aria-hidden="true">#</a></h4><ul><li>define：用于定义一个模块</li><li>require：用于模块引入</li></ul><h4 id="特点-1" tabindex="-1">特点 <a class="header-anchor" href="#特点-1" aria-hidden="true">#</a></h4><ul><li>体积更小，异步加载，按需加载，可以在浏览器端运行</li><li>不堵塞<code>js</code>线程运行</li></ul><h4 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-hidden="true">#</a></h4><ul><li>推荐使用<code>RequireJS</code>，目前是AMD规范最好的实现者之一</li></ul><h3 id="cmd" tabindex="-1">CMD <a class="header-anchor" href="#cmd" aria-hidden="true">#</a></h3><p><code>CMD</code>规范，全称<code>”Common Module Definition”</code>，称为 <code>通用模块加载规范</code>。它与<code>AMD很类似</code>，一般也是用在浏览器端。浏览器端异步加载库<code>Sea.js </code>实现的就是<code>CMD</code>规范</p><h4 id="特点-2" tabindex="-1">特点 <a class="header-anchor" href="#特点-2" aria-hidden="true">#</a></h4><ul><li><code>AMD</code>推崇依赖前置、也就是依赖要提前写好，而<code>CMD</code>推崇依赖就近的写法，用到了才写</li><li><code>AMD</code>一般来说是加载完立即执行，而<code>CMD</code>是延迟执行，推崇<code>as lazy as possible</code></li></ul><h3 id="umd" tabindex="-1">UMD <a class="header-anchor" href="#umd" aria-hidden="true">#</a></h3><p><code>UMD</code> 代表通用模块定义（<code>Universal Module Definition</code>），准确来说并不是一个独立的模块标准，而是集合了<code>CJS</code>、<code>AMD</code>等一体的打包模式，会自动判断当前可用环境</p><h4 id="特点-3" tabindex="-1">特点 <a class="header-anchor" href="#特点-3" aria-hidden="true">#</a></h4><ul><li>一套代码，多端使用，模块化兼容性好</li><li>当使用 <code>Rollup/Webpack</code> 之类的打包器时，<code>UMD</code> 通常用作备用模块</li></ul><h3 id="esm" tabindex="-1">ESM <a class="header-anchor" href="#esm" aria-hidden="true">#</a></h3><p><code>ESM</code>是<code>ES6 Module</code>，<code>ES6</code>标准中的模块规则，一统浏览器和服务端标准的解决方案</p><h4 id="关键词-2" tabindex="-1">关键词 <a class="header-anchor" href="#关键词-2" aria-hidden="true">#</a></h4><ul><li>import：用于模块的引入，只能接收字符串</li><li>export：用于模块的导出</li></ul><h4 id="特点-4" tabindex="-1">特点 <a class="header-anchor" href="#特点-4" aria-hidden="true">#</a></h4><ul><li>浏览器端会异步加载，这一点延续了<code>AMD</code>的优势，但是利用了浏览器原生的解析能力，代码体积更小</li><li><code>ESM</code>会有独立的静态解析阶段，<code>ESM</code>是编译时执行</li><li>模块内部自动采用严格模式，所以<code>this</code>的值为<code>undefined</code>，模块输出是值的引用，并且是只读的</li><li><code>import/export</code>提升： <code>import/export</code>必须位于模块顶级，不能位于作用域内；其次对于模块内的<code>import/export</code>会提升到模块顶部，这是在编译阶段完成的</li></ul><h4 id="其他-1" tabindex="-1">其他 <a class="header-anchor" href="#其他-1" aria-hidden="true">#</a></h4><ul><li><p>在<code>package.json</code>中设置<code>&quot;type&quot;: &quot;module&quot;</code> 才能开启<code>ESM</code>模式，会以<code>module</code>字段为目标文件路径</p></li><li><p>在静态分析阶段的时候，可以<code>Tree Shaking</code>，去除死代码，所谓静态分析, 就是在不运行代码的情况下, 对代码进行检测扫描分析</p></li></ul><h2 id="包管理器" tabindex="-1">包管理器 <a class="header-anchor" href="#包管理器" aria-hidden="true">#</a></h2><h3 id="npm" tabindex="-1">npm <a class="header-anchor" href="#npm" aria-hidden="true">#</a></h3><blockquote><p>这里说的是最早期的npm(v1/v2)</p></blockquote><h4 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-hidden="true">#</a></h4><p><code>npm</code>的理念是：<code>Bring the best of open source to you, your team and your company.</code></p><p><code>npm（node package manager）</code>：<code>node.js</code>的包管理器，主要用于安装、卸载、管理、分享依赖或者框架</p><h4 id="早期的缺点" tabindex="-1">早期的缺点 <a class="header-anchor" href="#早期的缺点" aria-hidden="true">#</a></h4><ul><li><code>node_modules</code>是一层一层嵌套的，也就是依赖<code>A</code>可能还有依赖<code>B</code>，这样可能会依赖层级太深</li><li>依赖无法被公用，而且存在下载大量重复依赖，占用磁盘空间较大</li></ul><h4 id="发展历程" tabindex="-1">发展历程 <a class="header-anchor" href="#发展历程" aria-hidden="true">#</a></h4><ul><li>npm V2：此时期主要是采用简单的<strong>递归依赖</strong>方法，最后形成<strong>高度嵌套的依赖树</strong>。然后就会造成如下问题：<strong>重复依赖嵌套地狱，空间资源浪费，安装速度过慢，文件路径过长</strong>等问题</li><li>npm V3：V3版本作了较大的更新，开始采取<strong>扁平化</strong>的依赖结构。这样的依赖结构可以很好的解决重复依赖的嵌套地狱问题，但是却出现<strong>扁平化依赖算法耗时长</strong>这样新的问题</li><li>npm V5：为了解决上面出现的扁平化依赖算法耗时长问题，<code>npm</code> 引入 <code>package-lock.json</code> 机制，package-lock.json 的作用是锁定项目的依赖结构，保证依赖的稳定性，可以有效地减少依赖解析的时间，从而提高了npm的性能。</li></ul><h3 id="yarn" tabindex="-1">yarn <a class="header-anchor" href="#yarn" aria-hidden="true">#</a></h3><blockquote><p>yarn最初的出现主要就是解决npm早期的不足之处</p></blockquote><h4 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-hidden="true">#</a></h4><ul><li>确定性：采用<code>yarn.lock</code>机制，能够锁定安装的版本并提供确定性的依赖关系</li><li>模块扁平化：将不同版本的依赖包，按照一定的策略，归结为单个版本，避免冗余</li><li>网络性能更好：<code>yarn</code>采用了请求排队的理念，类似于并发池连接，能够更好的利用网络资源</li><li>离线模式：采用缓存机制实现了离线模式</li></ul><h3 id="pnpm" tabindex="-1">pnpm <a class="header-anchor" href="#pnpm" aria-hidden="true">#</a></h3><blockquote><p>pnpm本质上也是包管理器，这一点跟npm/yarn没有区别，但是具有更加强大的功能</p></blockquote><h4 id="优点-1" tabindex="-1">优点 <a class="header-anchor" href="#优点-1" aria-hidden="true">#</a></h4><ul><li>包安装速度很快</li><li>利用软连接和硬连接使得磁盘空间利用非常高效</li><li>更安全，解决幽灵依赖问题</li><li>支持<code>monorepo</code></li></ul><h2 id="前端优化" tabindex="-1">前端优化 <a class="header-anchor" href="#前端优化" aria-hidden="true">#</a></h2><h3 id="性能指标" tabindex="-1">性能指标 <a class="header-anchor" href="#性能指标" aria-hidden="true">#</a></h3><blockquote><p>优化，需要确定优化的指标，分析性能优化的首要基础是数据和指标</p></blockquote><p>通常使用<code>Performance API</code>，可以让我们看到以下指标</p><h4 id="load" tabindex="-1">Load <a class="header-anchor" href="#load" aria-hidden="true">#</a></h4><p>代表页面中依赖的（CSS、图片、JS、视频）等所有资源加载完的事件</p><h4 id="domcontentloaded" tabindex="-1">DOMContentLoaded <a class="header-anchor" href="#domcontentloaded" aria-hidden="true">#</a></h4><p>代表DOM解析完毕</p><h4 id="fp-first-paint" tabindex="-1">FP (First Paint) <a class="header-anchor" href="#fp-first-paint" aria-hidden="true">#</a></h4><p>表示浏览器首次开始绘制像素</p><h4 id="fcp-first-contentful-paint" tabindex="-1"><strong>FCP</strong>（First Contentful Paint) <a class="header-anchor" href="#fcp-first-contentful-paint" aria-hidden="true">#</a></h4><p>表示渲染出第一个内容，这个指标就是我们说的白屏时间</p><h4 id="fmp-first-meaningful-paint" tabindex="-1"><strong>FMP</strong>（First Meaningful Paint） <a class="header-anchor" href="#fmp-first-meaningful-paint" aria-hidden="true">#</a></h4><p>首次进行有意义的绘制</p><h4 id="lcp-largest-contentful-paint" tabindex="-1"><strong>LCP</strong>（largest contentful Paint） <a class="header-anchor" href="#lcp-largest-contentful-paint" aria-hidden="true">#</a></h4><p>最大内容绘制，可以用作首屏时间指标</p><h3 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-hidden="true">#</a></h3><h4 id="网络优化" tabindex="-1">网络优化 <a class="header-anchor" href="#网络优化" aria-hidden="true">#</a></h4><h5 id="减少http请求次数" tabindex="-1">减少HTTP请求次数 <a class="header-anchor" href="#减少http请求次数" aria-hidden="true">#</a></h5><ul><li>CSS Sprite：雪碧图（精灵图），将多个图片合成一张图片，合并后的图片的大小要比分开图片大小的总和还小。使用雪碧图，需要使用<code>CSS</code>的<code>background-image</code>和<code>background-position</code>属性显示所需的图像段</li><li>Font Icon：使用字体图标来代替图标，将多个图标文件合成为字体图标文件不仅可以减少对于图片的<code>HTTP</code>请求数量与图标大小，还作为矢量图对于放大缩小等操作不会失真，此外字体图标可以得到<code>CSS</code>的很好的支持</li><li>Combined files：<code>Combined files</code>也就是合并文件，将多个<code>CSS</code>文件或者<code>JavaScript</code>文件合并成一个<code>CSS</code>文件或者<code>JavaScript</code>文件，可以有效减少<code>HTTP</code>请求数量，并且可以通过压缩算法减小文件的大小</li><li>Inline images：使用通过使用<code>data:URL</code>方案也就是直接放入图片的<code>base64数据</code>来直接将图像数据嵌入到页面或者<code>CSS</code>中，虽然这会增加文档或者是<code>CSS</code>文件的大小，但同样这确实是一个减少<code>HTTP</code>请求数量的方案</li></ul><h5 id="开启http2" tabindex="-1">开启HTTP2 <a class="header-anchor" href="#开启http2" aria-hidden="true">#</a></h5><ul><li>二进制格式</li><li>流量控制</li><li>头部压缩</li><li>多路复用</li><li>服务器推送</li></ul><h5 id="使用cdn" tabindex="-1">使用CDN <a class="header-anchor" href="#使用cdn" aria-hidden="true">#</a></h5><ul><li>对于一些资源类型的文件放置到<code>HTML</code>中并且使用<code>CDN</code>加速</li><li>在<code>webpack</code>中通过属性 <code>externals</code> 配置把类似 <strong>echart、element-ui、lodash</strong> 等第三方依赖库单独提取出，从而减小打包的体积大小</li></ul><h5 id="压缩资源文件" tabindex="-1">压缩资源文件 <a class="header-anchor" href="#压缩资源文件" aria-hidden="true">#</a></h5><ul><li>开启Gzip压缩：前端项目可以使用<code>compression-webpack-plugin</code>插件，使用<code>node</code>可以使用<code>compression</code>第三方库，或者由服务端配置<code>Nginx</code>开启</li><li>压缩JS：可以使用<code>UglifyPlugin</code></li><li>压缩CSS：可以使用<code>MiniCssExtractPlugin </code> or <code>cssnano</code></li><li>压缩HTML：可以使用<code>HtmlWebpackPlugin</code></li><li>压缩图片：<a href="https://tinypng.com/" target="_blank" rel="noreferrer">TinyPNG</a>或者<a href="https://imageoptim.com/mac" target="_blank" rel="noreferrer">ImageOptim</a>（可以使用工具）</li></ul><h5 id="ssr" tabindex="-1">SSR <a class="header-anchor" href="#ssr" aria-hidden="true">#</a></h5><ul><li>开启服务端渲染，首屏渲染快，<code>SEO</code>好</li><li><code>vue</code>有<code>nuxt.js</code>，<code>react</code>有<code>next.js</code></li></ul><h5 id="利用缓存" tabindex="-1">利用缓存 <a class="header-anchor" href="#利用缓存" aria-hidden="true">#</a></h5><ul><li>配置<code>ETag</code></li></ul><h4 id="资源优化" tabindex="-1">资源优化 <a class="header-anchor" href="#资源优化" aria-hidden="true">#</a></h4><h5 id="图片资源" tabindex="-1">图片资源 <a class="header-anchor" href="#图片资源" aria-hidden="true">#</a></h5><h6 id="使用新一代的图片格式" tabindex="-1">使用新一代的图片格式 <a class="header-anchor" href="#使用新一代的图片格式" aria-hidden="true">#</a></h6><ul><li>可以考虑<code>WebP</code>图片，是由<code>Google</code>提供的一种较为现代化的图片格式，支持有损压缩和无损压缩，支持<code>alpha</code>通道和表现动画内容</li></ul><h6 id="压缩图片" tabindex="-1">压缩图片 <a class="header-anchor" href="#压缩图片" aria-hidden="true">#</a></h6><ul><li>目的还是减小体积</li></ul><h6 id="适当调整图片的分辨率" tabindex="-1">适当调整图片的分辨率 <a class="header-anchor" href="#适当调整图片的分辨率" aria-hidden="true">#</a></h6><ul><li>对于图片而言，分辨率是影响图片大小的重要因素之一，较高的分辨率将影响页面的加载和解析速度</li></ul><h6 id="使用canvas实现本地图片的压缩" tabindex="-1">使用canvas实现本地图片的压缩 <a class="header-anchor" href="#使用canvas实现本地图片的压缩" aria-hidden="true">#</a></h6><ul><li>用于从本地上传到服务器的图片，可以使用<code>canvas</code>对原始图片进行剪裁、阉割，减小图片体积</li></ul><h6 id="图片懒加载" tabindex="-1">图片懒加载 <a class="header-anchor" href="#图片懒加载" aria-hidden="true">#</a></h6><ul><li>可以使用<code>getBoundingClientRect().top</code>去判断，也可以使用<code>IntersectionObserver API</code>实现图片懒加载</li></ul><h6 id="图片预加载" tabindex="-1">图片预加载 <a class="header-anchor" href="#图片预加载" aria-hidden="true">#</a></h6><ul><li>可以在特定的场景下使用，比如说我们知道漫画是一张一张连续的图片组成 。我们在看漫画时，也是一张一张看的，但如果当我们看完一张，切换到下一张时再加载图片，那么就会有一段空白的加载时间。而且漫画图片一般比较大，如果网络不是很好，那么加载时间就会比较久。体验就会下降。那么就可以使用预加载</li></ul><h6 id="使用css3代替图片" tabindex="-1">使用CSS3代替图片 <a class="header-anchor" href="#使用css3代替图片" aria-hidden="true">#</a></h6><ul><li>如果是纯色背景，或者渐变等效果能够使用<code>CSS3</code>绘制则尽量使用<code>CSS3</code></li></ul><h5 id="css资源" tabindex="-1">CSS资源 <a class="header-anchor" href="#css资源" aria-hidden="true">#</a></h5><h6 id="延迟加载非关健css" tabindex="-1">延迟加载非关健CSS <a class="header-anchor" href="#延迟加载非关健css" aria-hidden="true">#</a></h6><ul><li>比如首页我们只加载使用到的那部分CSS，再等到网络空闲的时机，加载出剩余的CSS</li></ul><h5 id="js资源" tabindex="-1">JS资源 <a class="header-anchor" href="#js资源" aria-hidden="true">#</a></h5><h6 id="使用-async-或-defer-属性" tabindex="-1">使用 async 或 defer 属性 <a class="header-anchor" href="#使用-async-或-defer-属性" aria-hidden="true">#</a></h6><h6 id="利用webpack分包懒加载" tabindex="-1">利用webpack分包懒加载 <a class="header-anchor" href="#利用webpack分包懒加载" aria-hidden="true">#</a></h6><h6 id="第三方库按需加载" tabindex="-1">第三方库按需加载 <a class="header-anchor" href="#第三方库按需加载" aria-hidden="true">#</a></h6><h6 id="除去重复以及死代码" tabindex="-1">除去重复以及死代码 <a class="header-anchor" href="#除去重复以及死代码" aria-hidden="true">#</a></h6><h4 id="代码层面优化" tabindex="-1">代码层面优化 <a class="header-anchor" href="#代码层面优化" aria-hidden="true">#</a></h4><h5 id="避免css表达式" tabindex="-1">避免CSS表达式 <a class="header-anchor" href="#避免css表达式" aria-hidden="true">#</a></h5><p><code>CSS</code>表达式通过<code>expression</code>方法来接受<code>JavaScript</code>表达式，是一种动态设置<code>CSS</code>的强大的方式，但同样也是非常危险的方式，<code>CSS</code>表达式的问题在于其会进行频繁的计算，<code>CSS</code>计算的频率要远远超出我们的想象，不仅在页面显示和缩放时会进行计算，在页面滚动或者移动鼠标都会重新计算一次，从而影响到页面的性能</p><h5 id="避免重定向" tabindex="-1">避免重定向 <a class="header-anchor" href="#避免重定向" aria-hidden="true">#</a></h5><p>如果一定要重定向的话使用永久重定向会好一些</p><h5 id="减少重排重绘" tabindex="-1">减少重排重绘 <a class="header-anchor" href="#减少重排重绘" aria-hidden="true">#</a></h5><ul><li>不要频繁操作元素的样式，对于静态页面，可以修改类名，而不是样式。</li><li>如果需要修改多个css属性，可以先将元素设置为display:none，然后操作完成之后再改变回来，这样就能大大降低回流次数</li><li>批量修改元素时，可以先让元素脱离文档流，等修改完毕后，再放入文档流</li></ul><h5 id="使用防抖与节流" tabindex="-1">使用防抖与节流 <a class="header-anchor" href="#使用防抖与节流" aria-hidden="true">#</a></h5><ul><li>可以在按钮、输入框、滚动条等地方使用，根据情况而定</li></ul><h5 id="使用事件委托" tabindex="-1">使用事件委托 <a class="header-anchor" href="#使用事件委托" aria-hidden="true">#</a></h5><ul><li>使用事件委托可以减小开销</li></ul><h5 id="清理垃圾" tabindex="-1">清理垃圾 <a class="header-anchor" href="#清理垃圾" aria-hidden="true">#</a></h5><ul><li>记得清除定时器等垃圾</li></ul><h3 id="感知优化" tabindex="-1">感知优化 <a class="header-anchor" href="#感知优化" aria-hidden="true">#</a></h3><h4 id="过渡" tabindex="-1">过渡 <a class="header-anchor" href="#过渡" aria-hidden="true">#</a></h4><ul><li><code>Loading</code>动画，可以用于页面加载、数据加载、提交按钮加载等等</li><li>骨架屏</li><li>进度条</li><li>弹窗过渡</li><li>滚动条平滑滚动</li></ul><h4 id="兜底方案" tabindex="-1">兜底方案 <a class="header-anchor" href="#兜底方案" aria-hidden="true">#</a></h4><ul><li>对于图片加载失败，可以利用<code>error</code>事件捕获到，然后更改此图片的<code>url</code>为兜底图的<code>url</code></li><li>对于列表无数据的时候可以使用一个图片兜底来说明没有数据</li></ul><h4 id="无感知刷新token" tabindex="-1">无感知刷新token <a class="header-anchor" href="#无感知刷新token" aria-hidden="true">#</a></h4><h4 id="单点登录sso" tabindex="-1">单点登录SSO <a class="header-anchor" href="#单点登录sso" aria-hidden="true">#</a></h4>',126),o=[c];function h(l,n,t,s,u,p){return d(),a("div",null,o)}const m=e(r,[["render",h]]);export{b as __pageData,m as default};
